<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; background-color: #fafafa; }
    h1 { margin-bottom: 20px; }
    form { margin-bottom: 30px; display: flex; flex-direction: column; max-width: 400px; background: #fff; padding: 15px; border-radius: 8px; box-shadow: 0 0 5px rgba(0,0,0,0.1); }
    label { margin: 5px 0 2px; font-weight: bold; }
    input { margin-bottom: 10px; padding: 8px; border-radius: 4px; border: 1px solid #ccc; }
    button { padding: 8px 12px; border: none; border-radius: 4px; background-color: #007bff; color: white; cursor: pointer; }
    button:hover { background-color: #0056b3; }
    ul { list-style-type: none; padding: 0; }
    li { background: #fff; margin: 5px 0; padding: 10px; border-radius: 5px; box-shadow: 0 0 4px rgba(0,0,0,0.1); display: flex; justify-content: space-between; align-items: center; }
    .actions button { margin-left: 5px; }
  </style>
</head>
<body>
  <h1><%= title %></h1>

  <!-- CREATE / UPDATE FORM -->
  <form id="userForm">
    <input type="hidden" id="userId" name="userId">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name" placeholder="Enter Name" required>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Enter Email" required>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password" placeholder="Enter Password" required>

    <button type="submit">Create User</button>
  </form>

  <!-- USER LIST -->
<ul id="userList">
  <% if (users && users.length > 0) { %>
    <% users.forEach(u => { %>
      <li>
        <div>
          <strong><%= u.name %></strong> — <%= u.email %>
        </div>
        <div class="actions">
          <button onclick="editUser(<%= u.id %>, '<%= u.name %>', '<%= u.email %>')">Edit</button>
          <button onclick="deleteUser(<%= u.id %>)" style="background-color:#dc3545">Delete</button>
        </div>
      </li>
    <% }) %>
  <% } else { %>
    <li>No users found</li>
  <% } %>
</ul>

<script>
  const userForm = document.getElementById('userForm');
  const userList = document.getElementById('userList');
  const userIdInput = document.getElementById('userId');

  //Fetch users and display them in the list
  async function refreshUserList() {
    try {
      const res = await fetch('/getAllUsers/json');
      const data = await res.json();
      const users = data.user || [];

      userList.innerHTML = users.length
        ? users.map(u => `
            <li>
              <div>
                <strong>${u.name}</strong> — ${u.email}
              </div>
              <div class="actions">
                <button onclick="editUser(${u.id}, '${u.name}', '${u.email}')">Edit</button>
                <button onclick="deleteUser(${u.id})" style="background-color:#dc3545">Delete</button>
              </div>
            </li>
          `).join('')
        : '<li>No users found</li>';
    } catch (err) {
      console.error('Error fetching users:', err);
      userList.innerHTML = '<li>Failed to load users</li>';
    }
  }

  //Handle Create / Update
  userForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const id = userIdInput.value;
    const name = userForm.name.value.trim();
    const email = userForm.email.value.trim();
    const password = userForm.password.value.trim();

    if (!name || !email || !password) {
      alert('All fields are required!');
      return;
    }

    try {
      const res = await fetch(id ? `/updateUser/${id}` : '/createUser', {
        method: id ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, password }),
      });

      const data = await res.json();

      if (res.ok) {
        alert(id ? 'User updated successfully!' : 'User created successfully!');
        userForm.reset();
        userIdInput.value = '';
        userForm.querySelector('button').innerText = 'Create User';
        refreshUserList(); // Refresh after submit
      } else {
        alert(data.message || 'Error occurred');
      }
    } catch (err) {
      console.error('Error submitting form:', err);
    }
  });

  //Edit user (fills form)
  function editUser(id, name, email) {
    userIdInput.value = id;
    userForm.name.value = name;
    userForm.email.value = email;
    userForm.password.value = '';
    userForm.querySelector('button').innerText = 'Update User';
  }

  //Delete user
  async function deleteUser(id) {
    if (!confirm('Are you sure you want to delete this user?')) return;
    try {
      const res = await fetch(`/deleteUser/${id}`, { method: 'DELETE' });
      const data = await res.json();
      if (res.ok) {
        alert('User deleted successfully!');
        refreshUserList(); //Refresh after delete
      } else {
        alert(data.message || 'Failed to delete user');
      }
    } catch (err) {
      console.error('Error deleting user:', err);
    }
  }
</script>


</body>
</html>
